// Code generated by gjrpc. DO NOT EDIT.

interface Transport {
    request(method: string, params: unknown): Promise<unknown>;
}

export interface API {
    Auth: Auth
    ListService: ListService
    ListsCatalog: ListsCatalog
    Youtube: Youtube
}

export function buildImpl(transport: Transport): API {
    return {
        Auth: new AuthImpl(transport),
        ListService: new ListServiceImpl(transport),
        ListsCatalog: new ListsCatalogImpl(transport),
        Youtube: new YoutubeImpl(transport),
    }
}

export interface Auth {
    Oauth(): Promise<OAuthResponse>
    Status(): Promise<AuthStatus>
}

export class AuthImpl implements Auth {
    constructor(private transport: Transport) {}

    async Oauth(): Promise<OAuthResponse> {
        return (await this.transport.request("auth.oauth", null)) as OAuthResponse;
    }

    async Status(): Promise<AuthStatus> {
        return (await this.transport.request("auth.status", null)) as AuthStatus;
    }
}

export interface ListService {
    Info(params: string): Promise<ListInfo>
    Items(params: string): Promise<ListItems>
    PageItems(params: PageRequest): Promise<ListItems>
    ExecuteQuery(params: Query): Promise<QueryResponse>
}

export class ListServiceImpl implements ListService {
    constructor(private transport: Transport) {}

    async Info(params: string): Promise<ListInfo> {
        return (await this.transport.request("list.info", params)) as ListInfo;
    }

    async Items(params: string): Promise<ListItems> {
        return (await this.transport.request("list.items", params)) as ListItems;
    }

    async PageItems(params: PageRequest): Promise<ListItems> {
        return (await this.transport.request("list.pageItems", params)) as ListItems;
    }

    async ExecuteQuery(params: Query): Promise<QueryResponse> {
        return (await this.transport.request("list.executeQuery", params)) as QueryResponse;
    }
}

export interface ListsCatalog {
    All(): Promise<AllLists>
}

export class ListsCatalogImpl implements ListsCatalog {
    constructor(private transport: Transport) {}

    async All(): Promise<AllLists> {
        return (await this.transport.request("catalog.all", null)) as AllLists;
    }
}

export interface Youtube {
    Playlists(): Promise<Playlists>
    Liked(): Promise<PlaylistItems>
}

export class YoutubeImpl implements Youtube {
    constructor(private transport: Transport) {}

    async Playlists(): Promise<Playlists> {
        return (await this.transport.request("youtube.playlists", null)) as Playlists;
    }

    async Liked(): Promise<PlaylistItems> {
        return (await this.transport.request("youtube.liked", null)) as PlaylistItems;
    }
}

export interface AllLists {
    Lists: ListInfo[]
}

export interface AuthStatus {
    Email: string
}

export interface ItemLiked {
    ItemID: number
    Xord: string
    YoutubeID: string
    Title: string
    Author: string
    ChannelID: string
}

export interface ListInfo {
    ID: string
    Name: string
    ListType: ListType
    ItemsCount: number
}

export interface ListItems {
    Items: ListItem[]
}

export interface Meta {
    ItemID: number
    CreatedAt: unknown
    UpdatedAt: unknown
    Xord: string
}

export interface OAuthResponse {
    RedirectURL: string
}

export interface PageRequest {
    ListID: string
    Offset: number
    Limit: number
}

export interface PlaylistItems {
    Response: unknown
}

export interface Playlists {
    Response: unknown
}

export interface Query {
    ListID: string
    Query: string
}

export interface QueryResponse {
    Status: string
    Object: unknown
}

export type ListItem = unknown

export type ListType = string
