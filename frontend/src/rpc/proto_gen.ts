// Code generated by gjrpc. DO NOT EDIT.

interface Transport {
    request(method: string, params: unknown): Promise<unknown>
}

export interface API {
    ListService: ListService
    Youtube: Youtube
    Auth: Auth
}

export function buildImpl(transport: Transport): API {
    return {
        ListService: new ListServiceImpl(transport),
        Youtube: new YoutubeImpl(transport),
        Auth: new AuthImpl(transport),
    }
}

export interface ListService {
    All(): Promise<AllLists>
    ListInfo(params: string): Promise<ListInfo>
    ListItems(params: string): Promise<ListItems>
}

export class ListServiceImpl implements ListService {
    constructor(private transport: Transport) {}

    async All(): Promise<AllLists> {
        return (await this.transport.request('lists.all', null)) as AllLists
    }

    async ListInfo(params: string): Promise<ListInfo> {
        return (await this.transport.request(
            'lists.listInfo',
            params,
        )) as ListInfo
    }

    async ListItems(params: string): Promise<ListItems> {
        return (await this.transport.request(
            'lists.listItems',
            params,
        )) as ListItems
    }
}

export interface Youtube {
    Playlists(): Promise<Playlists>
    Liked(): Promise<PlaylistItems>
}

export class YoutubeImpl implements Youtube {
    constructor(private transport: Transport) {}

    async Playlists(): Promise<Playlists> {
        return (await this.transport.request(
            'youtube.playlists',
            null,
        )) as Playlists
    }

    async Liked(): Promise<PlaylistItems> {
        return (await this.transport.request(
            'youtube.liked',
            null,
        )) as PlaylistItems
    }
}

export interface Auth {
    Oauth(): Promise<OAuthResponse>
    Status(): Promise<AuthStatus>
}

export class AuthImpl implements Auth {
    constructor(private transport: Transport) {}

    async Oauth(): Promise<OAuthResponse> {
        return (await this.transport.request(
            'auth.oauth',
            null,
        )) as OAuthResponse
    }

    async Status(): Promise<AuthStatus> {
        return (await this.transport.request('auth.status', null)) as AuthStatus
    }
}

export interface ListInfo {
    ID: string
    Name: string
    ListType: string
}

export interface ListItem {
    YoutubeID: string
    Title: string
    Author: string
    ChannelID: string
    ItemID: string
    Xord: string
}

export interface Playlists {
    Response: unknown
}

export interface PlaylistItems {
    Response: unknown
}

export interface OAuthResponse {
    RedirectURL: string
}

export interface AuthStatus {
    Email: string
}

export interface AllLists {
    Lists: ListInfo[]
}

export interface ListItems {
    Items: ListItem[]
}
