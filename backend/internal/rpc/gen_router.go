// Code generated by gjrpc. DO NOT EDIT.

package rpc

import (
	"encoding/json"
	jsonrpc "github.com/rwlist/gjrpc/pkg/jsonrpc"
	"strings"
)

type Router struct {
	handlers     Handlers
	convertError jsonrpc.ErrorConverter
}

func NewRouter(handlers Handlers, convertError jsonrpc.ErrorConverter) *Router {
	if convertError == nil {
		convertError = jsonrpc.DefaultErrorConverter
	}
	return &Router{
		convertError: convertError,
		handlers:     handlers,
	}
}

func (r *Router) notFound() (jsonrpc.Result, *jsonrpc.Error) {
	return nil, &jsonrpc.MethodNotFound
}

func (r *Router) Handle(req *jsonrpc.Request) (jsonrpc.Result, *jsonrpc.Error) {
	path := strings.Split(req.Method, ".")
	return r.handle(path, req)
}

func (r *Router) handle(path []string, req *jsonrpc.Request) (jsonrpc.Result, *jsonrpc.Error) {
	if len(path) == 0 {
		return r.notFound()
	}
	switch path[0] {
	case "auth":
		return r.handleAuth(path[1:], req)
	case "lists":
		return r.handleLists(path[1:], req)
	case "youtube":
		return r.handleYoutube(path[1:], req)
	}
	return r.notFound()
}

func (r *Router) handleAuth(path []string, req *jsonrpc.Request) (jsonrpc.Result, *jsonrpc.Error) {
	if len(path) == 0 {
		return r.notFound()
	}
	switch path[0] {
	case "oauth":
		return r.handleAuthOauth(path[1:], req)
	case "status":
		return r.handleAuthStatus(path[1:], req)
	}
	return r.notFound()
}

func (r *Router) handleLists(path []string, req *jsonrpc.Request) (jsonrpc.Result, *jsonrpc.Error) {
	if len(path) == 0 {
		return r.notFound()
	}
	switch path[0] {
	case "all":
		return r.handleListsAll(path[1:], req)
	case "listInfo":
		return r.handleListsListInfo(path[1:], req)
	case "listItems":
		return r.handleListsListItems(path[1:], req)
	}
	return r.notFound()
}

func (r *Router) handleYoutube(path []string, req *jsonrpc.Request) (jsonrpc.Result, *jsonrpc.Error) {
	if len(path) == 0 {
		return r.notFound()
	}
	switch path[0] {
	case "liked":
		return r.handleYoutubeLiked(path[1:], req)
	case "playlists":
		return r.handleYoutubePlaylists(path[1:], req)
	}
	return r.notFound()
}

func (r *Router) handleAuthOauth(path []string, req *jsonrpc.Request) (jsonrpc.Result, *jsonrpc.Error) {
	if len(path) == 0 {
		res, err := r.handlers.Auth.Oauth(req.Context)
		if err != nil {
			return r.convertError(err)
		}
		return res, nil
	}
	return r.notFound()
}

func (r *Router) handleAuthStatus(path []string, req *jsonrpc.Request) (jsonrpc.Result, *jsonrpc.Error) {
	if len(path) == 0 {
		res, err := r.handlers.Auth.Status(req.Context)
		if err != nil {
			return r.convertError(err)
		}
		return res, nil
	}
	return r.notFound()
}

func (r *Router) handleListsAll(path []string, req *jsonrpc.Request) (jsonrpc.Result, *jsonrpc.Error) {
	if len(path) == 0 {
		res, err := r.handlers.Lists.All(req.Context)
		if err != nil {
			return r.convertError(err)
		}
		return res, nil
	}
	return r.notFound()
}

func (r *Router) handleListsListInfo(path []string, req *jsonrpc.Request) (jsonrpc.Result, *jsonrpc.Error) {
	if len(path) == 0 {
		var request string
		if err := json.Unmarshal(req.Params, &request); err != nil {
			return r.convertError(err)
		}
		res, err := r.handlers.Lists.ListInfo(req.Context, request)
		if err != nil {
			return r.convertError(err)
		}
		return res, nil
	}
	return r.notFound()
}

func (r *Router) handleListsListItems(path []string, req *jsonrpc.Request) (jsonrpc.Result, *jsonrpc.Error) {
	if len(path) == 0 {
		var request string
		if err := json.Unmarshal(req.Params, &request); err != nil {
			return r.convertError(err)
		}
		res, err := r.handlers.Lists.ListItems(req.Context, request)
		if err != nil {
			return r.convertError(err)
		}
		return res, nil
	}
	return r.notFound()
}

func (r *Router) handleYoutubeLiked(path []string, req *jsonrpc.Request) (jsonrpc.Result, *jsonrpc.Error) {
	if len(path) == 0 {
		res, err := r.handlers.Youtube.Liked(req.Context)
		if err != nil {
			return r.convertError(err)
		}
		return res, nil
	}
	return r.notFound()
}

func (r *Router) handleYoutubePlaylists(path []string, req *jsonrpc.Request) (jsonrpc.Result, *jsonrpc.Error) {
	if len(path) == 0 {
		res, err := r.handlers.Youtube.Playlists(req.Context)
		if err != nil {
			return r.convertError(err)
		}
		return res, nil
	}
	return r.notFound()
}
